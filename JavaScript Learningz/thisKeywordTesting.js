////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//// Calculator Object
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Approach 1
function Calculator(){
    this.total = 0;
    this.arg1;
    this.arg2;
    
    this.read = function(arg1, arg2){
        this.arg1 = arg1;
        this.arg2 = arg2;
    }

    this.sum = function(){
        return this.arg1 + this.arg2;
    }

    this.mul = function(){
        return this.arg1 * this.arg2;
    }
}

let calculator = new Calculator();
calculator.read(1, 2);
console.log("Calculator Approach 1:")
console.log(calculator.sum());
console.log(calculator.mul());

// Approach 2
// I do not like this approach; feels less structured...
calculator = {
    read(arg1, arg2){
        this.arg1 = arg1;
        this.arg2 = arg2;
    },
    sum(){
        return this.arg1 + this.arg2;
    },
    mul(){
        return this.arg1 * this.arg2;
    }
}

calculator.read(1,2);
console.log("Calculator Approach 2:")
console.log(calculator.sum());
console.log(calculator.mul());

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//// Chaining with This
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function Ladder(){
    this.step = 0;
    this.up = function(){
        this.step++;
        return this;
    };
    this.down = function(){
        this.step--;
        return this;
    };
    this.showStep = function(){
        console.log(this.step);
    }
}

console.log("Ladder Steppin");
let L1 = new Ladder();
// We can chain functions on the original object by returning the actual obj in question (with 'this') after each method call
// kewl
L1.up().up().up().down().showStep();